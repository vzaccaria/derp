#!/usr/bin/env node
// Generated by LiveScript 1.3.1
(function(){
  var docopt, fs, shelljs, doc, getOption, o, filename, v, interp;
  docopt = require('docopt').docopt;
  fs = require('fs');
  shelljs = require('shelljs');
  doc = shelljs.cat(__dirname + "/docs/usage.md");
  getOption = function(a, b, def, o){
    if (!o[a] && !o[b]) {
      return def;
    } else {
      return o[b];
    }
  };
  o = docopt(doc);
  filename = getOption('-f', '--file', '/dev/stdin', o);
  filename == null && (filename = '/dev/stdin');
  v = require('verbal-expressions');
  interp = curry$(function(prefix, decorator, string){
    return (function(decorator){
      var placeholder, found, finalString;
      placeholder = v().beginCapture().find(prefix).anythingBut("}").then("}").endCapture();
      found = false;
      finalString = string.replace(placeholder, function(completePlaceholder){
        var innerPlaceholder;
        found = true;
        innerPlaceholder = v().find(prefix).beginCapture().anythingBut("}").endCapture().then("}");
        return completePlaceholder.replace(innerPlaceholder, function(complete, innerContent){
          return "\" + std::string(" + decorator(innerContent) + ") + \"";
        });
      });
      return finalString;
    }.call(this, decorator));
  });
  process.stdin.setEncoding('utf8');
  process.stdin.on('readable', function(){
    var content, interpolate;
    content = process.stdin.read();
    if (content !== "" && content != null) {
      interpolate = function(fileContent){
        var isString;
        isString = /"([^"\\]|\\.)*"/g;
        return fileContent.replace(isString, function(s){
          var finalString;
          finalString = interp('#{', function(it){
            return it;
          })(
          interp('##{', function(it){
            return "std::to_string(" + it + ")";
          })(
          s));
          if (finalString !== s) {
            return "std::string(" + finalString + ").c_str()";
          } else {
            return finalString;
          }
        });
      };
      return process.stdout.write(interpolate(content));
    }
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
